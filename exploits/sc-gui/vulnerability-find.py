import socket
import re

target_ip = input(" ")

# Function to check for common vulnerabilities
def check_vulnerabilities(target_ip):
    vulnerabilities = []
    
    # Check for open ports
    common_ports = [21, 22, 23, 25, 53, 80, 110, 143, 443, 445, 3389]
    for port in common_ports:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(2)
            result = sock.connect_ex((target_ip, port))
            if result == 0:
                vulnerabilities.append(f"[+] Open Port Found: {port}")
            sock.close()
        except:
            pass
    
    # Check for weak passwords
    weak_passwords = ["password", "123456", "qwerty"]
    for password in weak_passwords:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(2)
            sock.connect((target_ip, 22))  # SSH port
            sock.send(b"root\n" + password.encode() + b"\n")
            response = sock.recv(1024).decode()
            if "Access denied" not in response:
                vulnerabilities.append(f"[!] Weak Password Found: {password}")
            sock.close()
        except:
            pass
    
    # Check for unpatched software
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(2)
        sock.connect((target_ip, 22))  # SSH port
        sock.send(b"uname -a\n")
        response = sock.recv(1024).decode()
        if "Linux" in response:
            sock.send(b"dpkg -l | grep 'linux-image'\n")
            response = sock.recv(1024).decode()
            if "linux-image" in response:
                vulnerable_kernels = re.findall(r'linux-image-(\d+\.\d+\.\d+)-generic', response)
                for kernel in vulnerable_kernels:
                    if kernel < "4.15.0":
                        vulnerabilities.append(f"[!] Unpatched Kernel Found: {kernel}")
        sock.close()
    except:
        pass
    
    return vulnerabilities

# Run the script
vulnerabilities = check_vulnerabilities(target_ip)
if vulnerabilities:
    print("[+] Vulnerabilities Found:")
    for vulnerability in vulnerabilities:
        print(vulnerability)
else:
    print("[-] No vulnerabilities found.")
